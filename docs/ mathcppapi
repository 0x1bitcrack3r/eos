# group `mathcppapi` 

Defines common math functions and helper types.

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public inline void `[`multeq`](#group__mathcppapi_1ga51c4c1656f6c55e261e6ab5fd7397443)`(uint128_t & self,const uint128_t & other)`            | wraps multeq_i128 from [Math C API](#group__mathcapi)
`public inline void `[`diveq`](#group__mathcppapi_1ga4ef8c3f00b1ced637f145883f942b8ff)`(uint128_t & self,const uint128_t & other)`            | wraps diveq_i128 from [Math C API](#group__mathcapi)
`public template<>`  <br/>`T `[`min`](#group__mathcppapi_1gac459e1d6c24d9178441fed9163accc79)`(const T & a,const T & b)`            | Defined similar to [std::min()](#group__mathcppapi_1gac459e1d6c24d9178441fed9163accc79)
`public template<>`  <br/>`T `[`max`](#group__mathcppapi_1ga29bcc1fa0b9eaa7667a68a2e135dd8bd)`(const T & a,const T & b)`            | Define similar to [std::max()](#group__mathcppapi_1ga29bcc1fa0b9eaa7667a68a2e135dd8bd)
`struct `[`eosio::uint128`](docs/ mathcppapi#structeosio_1_1uint128) | A struct that wraps [uint128](docs/ mathcppapi#structeosio_1_1uint128) integer and defines common operator overloads.

## Members

#### `public inline void `[`multeq`](#group__mathcppapi_1ga51c4c1656f6c55e261e6ab5fd7397443)`(uint128_t & self,const uint128_t & other)` 

wraps multeq_i128 from [Math C API](#group__mathcapi)

Multiply two 128 bit unsigned integers and assign the value to the first parameter. This wraps multeq_i128 from [Math C API](#group__mathcapi). 
#### Parameters
* `self` Value to be multiplied. It will be replaced with the result 

* `other` Value integer to be multiplied.

Example: 
```cpp
uint128_t self(100);
uint128_t other(100);
multeq(self, other);
std::cout << self; // Output: 10000
```

#### `public inline void `[`diveq`](#group__mathcppapi_1ga4ef8c3f00b1ced637f145883f942b8ff)`(uint128_t & self,const uint128_t & other)` 

wraps diveq_i128 from [Math C API](#group__mathcapi)

Divide two 128 bit unsigned integers and assign the value to the first parameter. It will throw an exception if other is zero. This wraps diveq_i128 from [Math C API](#group__mathcapi)
#### Parameters
* `self` Numerator. It will be replaced with the result 

* `other` Denominator

Example: 
```cpp
uint128_t self(100);
uint128_t other(100);
diveq(self, other);
std::cout << self; // Output: 1
```

#### `public template<>`  <br/>`T `[`min`](#group__mathcppapi_1gac459e1d6c24d9178441fed9163accc79)`(const T & a,const T & b)` 

Defined similar to [std::min()](#group__mathcppapi_1gac459e1d6c24d9178441fed9163accc79)

Get the smaller of the given values 
#### Parameters
* `a` Value to compare 

* `b` Value to compare 

#### Returns
The smaller of a and b. If they are equivalent, returns a

Example: 
```cpp
uint128_t a(1);
uint128_t b(2);
std::cout << min(a, b); // Output: 1
```

#### `public template<>`  <br/>`T `[`max`](#group__mathcppapi_1ga29bcc1fa0b9eaa7667a68a2e135dd8bd)`(const T & a,const T & b)` 

Define similar to [std::max()](#group__mathcppapi_1ga29bcc1fa0b9eaa7667a68a2e135dd8bd)

Get the greater of the given values. 
#### Parameters
* `a` Value to compare 

* `b` Value to compare 

#### Returns
The greater of a and b. If they are equivalent, returns a

Example: 
```cpp
uint128_t a(1);
uint128_t b(2);
std::cout << max(a, b); // Output: 2
```

# struct `eosio::uint128` 

A struct that wraps [uint128](#structeosio_1_1uint128) integer and defines common operator overloads.

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public inline  `[`uint128`](#structeosio_1_1uint128_1af099085caa3269fc103c9d2411980fa0)`(uint128_t i)` | 
`public inline  `[`uint128`](#structeosio_1_1uint128_1a9ca27521d9a73a0154e3db1c4da0f6fd)`(uint64_t i)` | 
`public inline  `[`uint128`](#structeosio_1_1uint128_1a369dd5063ba0386eaa589a5b4eed5d42)`(uint32_t i)` | 
`public inline `[`uint128`](#structeosio_1_1uint128)` & `[`operator*=`](#structeosio_1_1uint128_1afbffb0745405f67f68f500f1dd253e15)`(const uint128_t & other)` | 
`public inline `[`uint128`](#structeosio_1_1uint128)` & `[`operator*=`](#structeosio_1_1uint128_1ac4d5956c6ba2b3cfadddb88540b71450)`(const `[`uint128`](#structeosio_1_1uint128)` & other)` | 
`public inline `[`uint128`](#structeosio_1_1uint128)` & `[`operator/=`](#structeosio_1_1uint128_1a8393ef6e563d40b3951242272468476e)`(const uint128_t & other)` | 
`public inline `[`uint128`](#structeosio_1_1uint128)` & `[`operator/=`](#structeosio_1_1uint128_1a9abba71eba9b11c1deeb4a4c771e7049)`(const `[`uint128`](#structeosio_1_1uint128)` & other)` | 
`public inline  explicit `[`operator uint64_t`](#structeosio_1_1uint128_1a300409747bed41832718972588d7da49)`() const` | 

## Members

#### `public inline  `[`uint128`](#structeosio_1_1uint128_1af099085caa3269fc103c9d2411980fa0)`(uint128_t i)` 

#### `public inline  `[`uint128`](#structeosio_1_1uint128_1a9ca27521d9a73a0154e3db1c4da0f6fd)`(uint64_t i)` 

#### `public inline  `[`uint128`](#structeosio_1_1uint128_1a369dd5063ba0386eaa589a5b4eed5d42)`(uint32_t i)` 

#### `public inline `[`uint128`](#structeosio_1_1uint128)` & `[`operator*=`](#structeosio_1_1uint128_1afbffb0745405f67f68f500f1dd253e15)`(const uint128_t & other)` 

#### `public inline `[`uint128`](#structeosio_1_1uint128)` & `[`operator*=`](#structeosio_1_1uint128_1ac4d5956c6ba2b3cfadddb88540b71450)`(const `[`uint128`](#structeosio_1_1uint128)` & other)` 

#### `public inline `[`uint128`](#structeosio_1_1uint128)` & `[`operator/=`](#structeosio_1_1uint128_1a8393ef6e563d40b3951242272468476e)`(const uint128_t & other)` 

#### `public inline `[`uint128`](#structeosio_1_1uint128)` & `[`operator/=`](#structeosio_1_1uint128_1a9abba71eba9b11c1deeb4a4c771e7049)`(const `[`uint128`](#structeosio_1_1uint128)` & other)` 

#### `public inline  explicit `[`operator uint64_t`](#structeosio_1_1uint128_1a300409747bed41832718972588d7da49)`() const` 

