# group `actioncppapi` 

Type-safe C++ wrapers for Action C API.

There are some methods from the [Action C API](#group__actioncapi) that can be used directly from C++

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public template<>`  <br/>`T `[`unpack_action_data`](#group__actioncppapi_1ga3ce0a297276d44f03c9b5dc17fcd2b31)`()`            | Interpret the action body as type T.
`public template<>`  <br/>`void `[`require_recipient`](#group__actioncppapi_1ga8d2d8ca22e484fab7dbfe99cc8564e04)`(`[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` name,accounts... remaining_accounts)`            | Verify specified accounts exist in the set of notified accounts.
`public void `[`require_auth`](#group__actioncppapi_1gaa9c6bd255a286073e7dc8a337f2b11a2)`(const permission_level & level)`            | 
`public template<>`  <br/>`void `[`dispatch_inline`](#group__actioncppapi_1gae22c78ffb0e0b2f7ecc001754d2cf7ab)`(`[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` code,`[`action_name`](#group__types_1gab0390a1836d20bbbb735af2fce1ad3e8)` act,vector< permission_level > perms,std::tuple< Args... > args)`            | 
`struct `[`eosio::permission_level`](docs/ actioncppapi#structeosio_1_1permission__level) | 
`struct `[`eosio::action`](docs/ actioncppapi#structeosio_1_1action) | This is the packed representation of an action along with meta-data about the authorization levels.
`struct `[`eosio::action_meta`](docs/ actioncppapi#structeosio_1_1action__meta) | 
`struct `[`eosio::inline_dispatcher`](docs/ actioncppapi#structeosio_1_1inline__dispatcher) | 
`struct `[`eosio::inline_dispatcher< void(T::*)(Args...), Name >`](docs/ actioncppapi#structeosio_1_1inline__dispatcher_3_01void_07_t_1_1_5_08_07_args_8_8_8_08_00_01_name_01_4) | 

## Members

#### `public template<>`  <br/>`T `[`unpack_action_data`](#group__actioncppapi_1ga3ce0a297276d44f03c9b5dc17fcd2b31)`()` 

Interpret the action body as type T.

This method unpacks the current action at type T.

Example: 
```cpp
struct dummy_action {
  char a; //1
  unsigned long long b; //8
  int  c; //4

  EOSLIB_SERIALIZE( dummy_action, (a)(b)(c) )
};
dummy_action msg = unpack_action_data<dummy_action>();
```

#### `public template<>`  <br/>`void `[`require_recipient`](#group__actioncppapi_1ga8d2d8ca22e484fab7dbfe99cc8564e04)`(`[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` name,accounts... remaining_accounts)` 

Verify specified accounts exist in the set of notified accounts.

All of the listed accounts will be added to the set of accounts to be notified

This helper method enables you to add multiple accounts to accounts to be notified list with a single call rather than having to call the similar C API multiple times.

action.code is also considered as part of the set of notified accounts

Example: 
```cpp
require_recipient(N(Account1), N(Account2), N(Account3)); // throws exception if any of them not in set.
```

#### `public void `[`require_auth`](#group__actioncppapi_1gaa9c6bd255a286073e7dc8a337f2b11a2)`(const permission_level & level)` 

#### `public template<>`  <br/>`void `[`dispatch_inline`](#group__actioncppapi_1gae22c78ffb0e0b2f7ecc001754d2cf7ab)`(`[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` code,`[`action_name`](#group__types_1gab0390a1836d20bbbb735af2fce1ad3e8)` act,vector< permission_level > perms,std::tuple< Args... > args)` 

# struct `eosio::permission_level` 

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public `[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` `[`actor`](#structeosio_1_1permission__level_1aebfedbe1dd4d2f2836d8851ef510af59) | 
`public `[`permission_name`](#group__types_1ga4a16baef1413dc2ec44666f6cc85adb1)` `[`permission`](#structeosio_1_1permission__level_1a60acff25628eb7c1bdfe2ca17c3ec112) | 
`public inline  `[`permission_level`](#structeosio_1_1permission__level_1a546e2f82b781fb528a31e5581a31b673)`(`[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` a,`[`permission_name`](#group__types_1ga4a16baef1413dc2ec44666f6cc85adb1)` p)` | 
`public inline  `[`permission_level`](#structeosio_1_1permission__level_1a80e38737c6e727a27e9ff7a195f74d5d)`()` | 

## Members

#### `public `[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` `[`actor`](#structeosio_1_1permission__level_1aebfedbe1dd4d2f2836d8851ef510af59) 

#### `public `[`permission_name`](#group__types_1ga4a16baef1413dc2ec44666f6cc85adb1)` `[`permission`](#structeosio_1_1permission__level_1a60acff25628eb7c1bdfe2ca17c3ec112) 

#### `public inline  `[`permission_level`](#structeosio_1_1permission__level_1a546e2f82b781fb528a31e5581a31b673)`(`[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` a,`[`permission_name`](#group__types_1ga4a16baef1413dc2ec44666f6cc85adb1)` p)` 

#### `public inline  `[`permission_level`](#structeosio_1_1permission__level_1a80e38737c6e727a27e9ff7a195f74d5d)`()` 

# struct `eosio::action` 

This is the packed representation of an action along with meta-data about the authorization levels.

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public `[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` `[`account`](#structeosio_1_1action_1a0294f981aa61b546ea82785af0a4a043) | 
`public `[`action_name`](#group__types_1gab0390a1836d20bbbb735af2fce1ad3e8)` `[`name`](#structeosio_1_1action_1a70afd7e77ad5c1b61a0bb8c748962015) | 
`public vector< `[`permission_level`](#structeosio_1_1permission__level)` > `[`authorization`](#structeosio_1_1action_1ab561bf311e71a6a07c09d727fb80ef0d) | 
`public `[`bytes`](#namespaceeosio_1ac34f2f739bdb0c1b0fa78e14fbd8a06d)` `[`data`](#structeosio_1_1action_1a9458cbd9bd544705512782182f1f997c) | 
`public  `[`action`](#structeosio_1_1action_1aebc29a38547efa71db8ec20cc56d69a4)`() = default` | 
`public template<>`  <br/>`inline  `[`action`](#structeosio_1_1action_1ac4fa6584567d8c5a24c9eb3254c6ad80)`(vector< `[`permission_level`](#structeosio_1_1permission__level)` > && auth,const Action & value)` | #### Parameters
`public template<>`  <br/>`inline  `[`action`](#structeosio_1_1action_1a38ac83086a7f7250e65453aaa29e2b45)`(const `[`permission_level`](#structeosio_1_1permission__level)` & auth,const Action & value)` | #### Parameters
`public template<>`  <br/>`inline  `[`action`](#structeosio_1_1action_1ad1b45d1ec523d2b5a86a1c0c7e8055db)`(const Action & value)` | #### Parameters
`public template<>`  <br/>`inline  `[`action`](#structeosio_1_1action_1a54a4a4256512de6cdeb96d3dd852502e)`(const `[`permission_level`](#structeosio_1_1permission__level)` & auth,`[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` a,`[`action_name`](#group__types_1gab0390a1836d20bbbb735af2fce1ad3e8)` n,T && value)` | #### Parameters
`public template<>`  <br/>`inline  `[`action`](#structeosio_1_1action_1a69ac6d741e0035ee0c10ef0cc274f053)`(vector< `[`permission_level`](#structeosio_1_1permission__level)` > auths,`[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` a,`[`action_name`](#group__types_1gab0390a1836d20bbbb735af2fce1ad3e8)` n,T && value)` | #### Parameters
`public inline  `[`EOSLIB_SERIALIZE`](#structeosio_1_1action_1a848cfa77395aa8447c5468c619c4a42a)`(`[`action`](#structeosio_1_1action)`,(`[`account](#structeosio_1_1action_1a0294f981aa61b546ea82785af0a4a043))([name](#structeosio_1_1name))([authorization](#structeosio_1_1action_1ab561bf311e71a6a07c09d727fb80ef0d))([data`](#structeosio_1_1action_1a9458cbd9bd544705512782182f1f997c))`) const` | 
`public inline void `[`send_context_free`](#structeosio_1_1action_1a984a41daf2d1c4d6506cac0c98ac7a2a)`() const` | 
`public template<>`  <br/>`inline T `[`data_as`](#structeosio_1_1action_1ab10f4621dd9e24a33642d8fb240b1a01)`()` | Retrieve the unpacked data as T 

## Members

#### `public `[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` `[`account`](#structeosio_1_1action_1a0294f981aa61b546ea82785af0a4a043) 

#### `public `[`action_name`](#group__types_1gab0390a1836d20bbbb735af2fce1ad3e8)` `[`name`](#structeosio_1_1action_1a70afd7e77ad5c1b61a0bb8c748962015) 

#### `public vector< `[`permission_level`](#structeosio_1_1permission__level)` > `[`authorization`](#structeosio_1_1action_1ab561bf311e71a6a07c09d727fb80ef0d) 

#### `public `[`bytes`](#namespaceeosio_1ac34f2f739bdb0c1b0fa78e14fbd8a06d)` `[`data`](#structeosio_1_1action_1a9458cbd9bd544705512782182f1f997c) 

#### `public  `[`action`](#structeosio_1_1action_1aebc29a38547efa71db8ec20cc56d69a4)`() = default` 

#### `public template<>`  <br/>`inline  `[`action`](#structeosio_1_1action_1ac4fa6584567d8c5a24c9eb3254c6ad80)`(vector< `[`permission_level`](#structeosio_1_1permission__level)` > && auth,const Action & value)` 

#### Parameters
* `Action` - a type derived from action_meta<Scope,Name> 

#### Parameters
* `value` - will be serialized via pack into data

#### `public template<>`  <br/>`inline  `[`action`](#structeosio_1_1action_1a38ac83086a7f7250e65453aaa29e2b45)`(const `[`permission_level`](#structeosio_1_1permission__level)` & auth,const Action & value)` 

#### Parameters
* `Action` - a type derived from action_meta<Scope,Name> 

#### Parameters
* `value` - will be serialized via pack into data

#### `public template<>`  <br/>`inline  `[`action`](#structeosio_1_1action_1ad1b45d1ec523d2b5a86a1c0c7e8055db)`(const Action & value)` 

#### Parameters
* `Action` - a type derived from action_meta<Scope,Name> 

#### Parameters
* `value` - will be serialized via pack into data

#### `public template<>`  <br/>`inline  `[`action`](#structeosio_1_1action_1a54a4a4256512de6cdeb96d3dd852502e)`(const `[`permission_level`](#structeosio_1_1permission__level)` & auth,`[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` a,`[`action_name`](#group__types_1gab0390a1836d20bbbb735af2fce1ad3e8)` n,T && value)` 

#### Parameters
* `T` - the type of the action data 

#### Parameters
* `auth` - a single [permission_level](#structeosio_1_1permission__level) to be used as the authorization of the action 

* `a` - name of the contract account 

* `n` - name of the action 

* `value` - will be serialized via pack into data

#### `public template<>`  <br/>`inline  `[`action`](#structeosio_1_1action_1a69ac6d741e0035ee0c10ef0cc274f053)`(vector< `[`permission_level`](#structeosio_1_1permission__level)` > auths,`[`account_name`](#group__types_1ga3b44deb4b3b8d6ebab339d1263692117)` a,`[`action_name`](#group__types_1gab0390a1836d20bbbb735af2fce1ad3e8)` n,T && value)` 

#### Parameters
* `T` - the type of the action data 

#### Parameters
* `auths` - vector permission_levels defining the authorizations of the action 

* `a` - name of the contract account 

* `n` - name of the action 

* `value` - will be serialized via pack into data

#### `public inline  `[`EOSLIB_SERIALIZE`](#structeosio_1_1action_1a848cfa77395aa8447c5468c619c4a42a)`(`[`action`](#structeosio_1_1action)`,(`[`account](#structeosio_1_1action_1a0294f981aa61b546ea82785af0a4a043))([name](#structeosio_1_1name))([authorization](#structeosio_1_1action_1ab561bf311e71a6a07c09d727fb80ef0d))([data`](#structeosio_1_1action_1a9458cbd9bd544705512782182f1f997c))`) const` 

#### `public inline void `[`send_context_free`](#structeosio_1_1action_1a984a41daf2d1c4d6506cac0c98ac7a2a)`() const` 

#### `public template<>`  <br/>`inline T `[`data_as`](#structeosio_1_1action_1ab10f4621dd9e24a33642d8fb240b1a01)`()` 

Retrieve the unpacked data as T 
#### Parameters
* `T` expected type of data 

#### Returns
the action data

# struct `eosio::action_meta` 

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------

## Members

# struct `eosio::inline_dispatcher` 

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------

## Members

# struct `eosio::inline_dispatcher< void(T::*)(Args...), Name >` 

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------

## Members

