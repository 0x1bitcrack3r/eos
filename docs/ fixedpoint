# group `fixedpoint` 

32,64,128,256 bits version of Fixed Point variables

Floating point operations are indeterministic, hence is prevented in smart contract. The smart contract developers should use the appropriate Fixed_Point template class by passing the number to be represented in integer format and the number of decimals required. These template classes also support the arithmetic operations and basic comparison operators

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public template<>`  <br/>`T `[`assignHelper`](#group__fixedpoint_1ga68c90c18b96d6e1789a567b16a7cdf2f)`(T rhs_val,uint8_t q,uint8_t qr)`            | 
`public template<>`  <br/>`fixed_point64< Q > `[`fixed_divide`](#group__fixedpoint_1ga6d31edb37da483459fb277534d74bbf5)`(uint32_t lhs,uint32_t rhs)`            | Wrapper function for dividing two unit64 variable and stores result in [fixed_point64](docs/ fixedpoint#structeosio_1_1fixed__point64).
`public template<>`  <br/>`fixed_point128< Q > `[`fixed_divide`](#group__fixedpoint_1ga26f98cb47eae52015cd24d3c104fc50d)`(uint64_t lhs,uint64_t rhs)`            | Wrapper function for dividing two unit64 variable and stores result in [fixed_point128](#structeosio_1_1fixed__point128) Wrapper function for dividing two unit64 variable and stores result in [fixed_point128](#structeosio_1_1fixed__point128).
`public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1ga9a6e26a69471e1d42ca0f6b41b673734)`(const fixed_point128< qr > & r)`            | 
`public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1gac03c87c2b4a19daf60e5f9c56c4584f0)`(const fixed_point64< qr > & r)`            | 
`public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1gab26dee4e941063197fb98f2d71d9c8ce)`(const fixed_point32< qr > & r)`            | 
`public template<>`  <br/>` `[`fixed_point64`](#group__fixedpoint_1ga0fcb07196ce3b1ee19897d2edd1f362b)`(const fixed_point64< QR > & r)`            | Can create [fixed_point64](#structeosio_1_1fixed__point64) instance from int64_t, [fixed_point64](#structeosio_1_1fixed__point64),32 instances.
`public template<>`  <br/>` `[`fixed_point64`](#group__fixedpoint_1ga02a221576feae394dc006a6f65ba66c2)`(const fixed_point32< QR > & r)`            | 
`public template<>`  <br/>`fixed_point64<(Q >QR)?Q:QR > `[`operator+`](#group__fixedpoint_1ga949ad7f0149535736353c9283797468b)`(const fixed_point64< QR > & rhs) const`            | Addition between two [fixed_point64](#structeosio_1_1fixed__point64) variables and the result goes to [fixed_point64](#structeosio_1_1fixed__point64).
`public template<>`  <br/>`fixed_point64<(Q >QR)?Q:QR > `[`operator-`](#group__fixedpoint_1ga49301a70e323c7b6fa7e8b4d4cd1cce2)`(const fixed_point64< QR > & rhs) const`            | Subtraction between two [fixed_point64](#structeosio_1_1fixed__point64) variables and the result goes to [fixed_point64](#structeosio_1_1fixed__point64).
`public template<>`  <br/>`fixed_point128< Q+QR > `[`operator*`](#group__fixedpoint_1gaf88630db8a6e5f2f026abe4b6fc953dc)`(const fixed_point64< QR > & r) const`            | Multiplication operator for [fixed_point64](#structeosio_1_1fixed__point64). The result goes to [fixed_point64](#structeosio_1_1fixed__point64).
`public template<>`  <br/>`fixed_point128< Q+64-QR > `[`operator/`](#group__fixedpoint_1ga810e2397dd4645ec575430ffd54b5d3f)`(const fixed_point64< QR > & r) const`            | Division of two [fixed_point64](#structeosio_1_1fixed__point64) result will be stored in [fixed_point128](#structeosio_1_1fixed__point128).
`public template<>`  <br/>` `[`fixed_point32`](#group__fixedpoint_1ga81c6f339a55c8327935ef972ebdb278d)`(const fixed_point32< QR > & r)`            | 
`public template<>`  <br/>` `[`fixed_point32`](#group__fixedpoint_1ga7ad1f82c49b206575fccf8b736815d7c)`(const fixed_point64< QR > & r)`            | 
`public template<>`  <br/>`fixed_point32< Q > & `[`operator=`](#group__fixedpoint_1ga7e9ed1f23b132f0a8c7cca091321807f)`(const fixed_point32< QR > & r)`            | 
`public template<>`  <br/>`fixed_point32< Q > & `[`operator=`](#group__fixedpoint_1ga346f1bad63f2779ddcfc1fb4bbb533f7)`(const fixed_point64< QR > & r)`            | 
`public template<>`  <br/>`fixed_point32<(Q >QR)?Q:QR > `[`operator+`](#group__fixedpoint_1ga6eefa850d217b820020e76752abfc3eb)`(const fixed_point32< QR > & rhs) const`            | Addition between two [fixed_point32](#structeosio_1_1fixed__point32) variables and the result goes to [fixed_point32](#structeosio_1_1fixed__point32).
`public template<>`  <br/>`fixed_point32<(Q >QR)?Q:QR > `[`operator-`](#group__fixedpoint_1ga2c2084d8e4a80f4e75346174b23e78aa)`(const fixed_point32< QR > & rhs) const`            | Subtraction between two [fixed_point32](#structeosio_1_1fixed__point32) variables and the result goes to [fixed_point32](#structeosio_1_1fixed__point32).
`public template<>`  <br/>`fixed_point64< Q+QR > `[`operator*`](#group__fixedpoint_1ga6e18faa394f294b64783e6b46b5d88d6)`(const fixed_point32< QR > & r) const`            | Multiplication operator for [fixed_point32](#structeosio_1_1fixed__point32). The result goes to [fixed_point64](#structeosio_1_1fixed__point64).
`public template<>`  <br/>`fixed_point64< Q+32-QR > `[`operator/`](#group__fixedpoint_1gabeb73cfe2cf17016a4ad843f3a8a229c)`(const fixed_point32< QR > & r) const`            | Division of two [fixed_point32](#structeosio_1_1fixed__point32) result will be stored in [fixed_point64](#structeosio_1_1fixed__point64).
`struct `[`eosio::fixed_point32`](docs/ fixedpoint#structeosio_1_1fixed__point32) | 32 bits representation of Fixed Point class.
`struct `[`eosio::fixed_point64`](docs/ fixedpoint#structeosio_1_1fixed__point64) | 64 bits representation of Fixed Point class.
`struct `[`eosio::fixed_point128`](docs/ fixedpoint#structeosio_1_1fixed__point128) | 128 bits representation of Fixed Point class.

## Members

#### `public template<>`  <br/>`T `[`assignHelper`](#group__fixedpoint_1ga68c90c18b96d6e1789a567b16a7cdf2f)`(T rhs_val,uint8_t q,uint8_t qr)` 

#### `public template<>`  <br/>`fixed_point64< Q > `[`fixed_divide`](#group__fixedpoint_1ga6d31edb37da483459fb277534d74bbf5)`(uint32_t lhs,uint32_t rhs)` 

Wrapper function for dividing two unit64 variable and stores result in [fixed_point64](#structeosio_1_1fixed__point64).

Wrapper function for dividing two unit32 variable and stores result in [fixed_point64](#structeosio_1_1fixed__point64)

Example: 
```cpp
fixed_point64<33> result = fixed_divide(131313, 2323)
```

#### `public template<>`  <br/>`fixed_point128< Q > `[`fixed_divide`](#group__fixedpoint_1ga26f98cb47eae52015cd24d3c104fc50d)`(uint64_t lhs,uint64_t rhs)` 

Wrapper function for dividing two unit64 variable and stores result in [fixed_point128](#structeosio_1_1fixed__point128) Wrapper function for dividing two unit64 variable and stores result in [fixed_point128](#structeosio_1_1fixed__point128).

Example: 
```cpp
fixed_point128<33> result = fixed_divide(131313, 2323)
```

#### `public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1ga9a6e26a69471e1d42ca0f6b41b673734)`(const fixed_point128< qr > & r)` 

#### `public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1gac03c87c2b4a19daf60e5f9c56c4584f0)`(const fixed_point64< qr > & r)` 

#### `public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1gab26dee4e941063197fb98f2d71d9c8ce)`(const fixed_point32< qr > & r)` 

#### `public template<>`  <br/>` `[`fixed_point64`](#group__fixedpoint_1ga0fcb07196ce3b1ee19897d2edd1f362b)`(const fixed_point64< QR > & r)` 

Can create [fixed_point64](#structeosio_1_1fixed__point64) instance from int64_t, [fixed_point64](#structeosio_1_1fixed__point64),32 instances.

Various constructors for [fixed_point64](#structeosio_1_1fixed__point64) Example: 
```cpp
fixed_point32<18> a(1234.455667);
fixed_point64<3> b(a);
fixed_point64<6> b(13324.32323);
fixed_point64<5> c(a);
```

#### `public template<>`  <br/>` `[`fixed_point64`](#group__fixedpoint_1ga02a221576feae394dc006a6f65ba66c2)`(const fixed_point32< QR > & r)` 

#### `public template<>`  <br/>`fixed_point64<(Q >QR)?Q:QR > `[`operator+`](#group__fixedpoint_1ga949ad7f0149535736353c9283797468b)`(const fixed_point64< QR > & rhs) const` 

Addition between two [fixed_point64](#structeosio_1_1fixed__point64) variables and the result goes to [fixed_point64](#structeosio_1_1fixed__point64).

Addition between two [fixed_point64](#structeosio_1_1fixed__point64) variables Number of decimal on result will be max of decimals of lhs and rhs

#### `public template<>`  <br/>`fixed_point64<(Q >QR)?Q:QR > `[`operator-`](#group__fixedpoint_1ga49301a70e323c7b6fa7e8b4d4cd1cce2)`(const fixed_point64< QR > & rhs) const` 

Subtraction between two [fixed_point64](#structeosio_1_1fixed__point64) variables and the result goes to [fixed_point64](#structeosio_1_1fixed__point64).

Subtraction between two [fixed_point64](#structeosio_1_1fixed__point64) variables Number of decimal on result will be max of decimals of lhs and rhs

#### `public template<>`  <br/>`fixed_point128< Q+QR > `[`operator*`](#group__fixedpoint_1gaf88630db8a6e5f2f026abe4b6fc953dc)`(const fixed_point64< QR > & r) const` 

Multiplication operator for [fixed_point64](#structeosio_1_1fixed__point64). The result goes to [fixed_point64](#structeosio_1_1fixed__point64).

Multiplication operator for [fixed_point64](#structeosio_1_1fixed__point64). The result goes to [fixed_point128](#structeosio_1_1fixed__point128) Number of decimal on result will be sum of number of decimals of lhs and rhs

Example: 
```cpp
fixed_point128<33> result = fixed_point64<0>(131313) / fixed_point64<0>(2323)
```

#### `public template<>`  <br/>`fixed_point128< Q+64-QR > `[`operator/`](#group__fixedpoint_1ga810e2397dd4645ec575430ffd54b5d3f)`(const fixed_point64< QR > & r) const` 

Division of two [fixed_point64](#structeosio_1_1fixed__point64) result will be stored in [fixed_point128](#structeosio_1_1fixed__point128).

Division operator for [fixed_point64](#structeosio_1_1fixed__point64)

Example: 
```cpp
fixed_point128<33> result = fixed_point64<0>(131313) / fixed_point64<0>(2323)
```

#### `public template<>`  <br/>` `[`fixed_point32`](#group__fixedpoint_1ga81c6f339a55c8327935ef972ebdb278d)`(const fixed_point32< QR > & r)` 

#### `public template<>`  <br/>` `[`fixed_point32`](#group__fixedpoint_1ga7ad1f82c49b206575fccf8b736815d7c)`(const fixed_point64< QR > & r)` 

#### `public template<>`  <br/>`fixed_point32< Q > & `[`operator=`](#group__fixedpoint_1ga7e9ed1f23b132f0a8c7cca091321807f)`(const fixed_point32< QR > & r)` 

#### `public template<>`  <br/>`fixed_point32< Q > & `[`operator=`](#group__fixedpoint_1ga346f1bad63f2779ddcfc1fb4bbb533f7)`(const fixed_point64< QR > & r)` 

#### `public template<>`  <br/>`fixed_point32<(Q >QR)?Q:QR > `[`operator+`](#group__fixedpoint_1ga6eefa850d217b820020e76752abfc3eb)`(const fixed_point32< QR > & rhs) const` 

Addition between two [fixed_point32](#structeosio_1_1fixed__point32) variables and the result goes to [fixed_point32](#structeosio_1_1fixed__point32).

Addition between two [fixed_point32](#structeosio_1_1fixed__point32) variables Number of decimal on result will be max of decimals of lhs and rhs

#### `public template<>`  <br/>`fixed_point32<(Q >QR)?Q:QR > `[`operator-`](#group__fixedpoint_1ga2c2084d8e4a80f4e75346174b23e78aa)`(const fixed_point32< QR > & rhs) const` 

Subtraction between two [fixed_point32](#structeosio_1_1fixed__point32) variables and the result goes to [fixed_point32](#structeosio_1_1fixed__point32).

Subtraction between two [fixed_point32](#structeosio_1_1fixed__point32) variables Number of decimal on result will be max of decimals of lhs and rhs

#### `public template<>`  <br/>`fixed_point64< Q+QR > `[`operator*`](#group__fixedpoint_1ga6e18faa394f294b64783e6b46b5d88d6)`(const fixed_point32< QR > & r) const` 

Multiplication operator for [fixed_point32](#structeosio_1_1fixed__point32). The result goes to [fixed_point64](#structeosio_1_1fixed__point64).

Multiplication operator for [fixed_point32](#structeosio_1_1fixed__point32). The result goes to [fixed_point64](#structeosio_1_1fixed__point64) Number of decimal on result will be sum of number of decimals of lhs and rhs

Example: 
```cpp
fixed_point64<33> result = fixed_point32<0>(131313) / fixed_point32<0>(2323)
```

#### `public template<>`  <br/>`fixed_point64< Q+32-QR > `[`operator/`](#group__fixedpoint_1gabeb73cfe2cf17016a4ad843f3a8a229c)`(const fixed_point32< QR > & r) const` 

Division of two [fixed_point32](#structeosio_1_1fixed__point32) result will be stored in [fixed_point64](#structeosio_1_1fixed__point64).

Division operator for [fixed_point32](#structeosio_1_1fixed__point32)

Example: 
```cpp
fixed_point64<33> result = fixed_point32<0>(131313) / fixed_point32<0>(2323)
```

# struct `eosio::fixed_point32` 

32 bits representation of Fixed Point class.

This class is implemented to to replace the floating point variables It can resolve floating point undetermenistic related issues

Example: 
```cpp
fixed_point32<17> b(9.654);
fixed_point32<18> c = a*b;
fixed_point32<24> d = a+b+c;
fixed_point32<24> e = b/a;
```

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public int32_t `[`val`](docs/ fixedpoint#structeosio_1_1fixed__point32_1adc0fb8c31ec9e07e6e3a4a7e04fe2471) | 
`public template<>`  <br/>` `[`fixed_point32`](#group__fixedpoint_1ga81c6f339a55c8327935ef972ebdb278d)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` | 
`public template<>`  <br/>` `[`fixed_point32`](#group__fixedpoint_1ga7ad1f82c49b206575fccf8b736815d7c)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` | 
`public inline  `[`fixed_point32`](#structeosio_1_1fixed__point32_1af7b7646354bc934510228ca1bd53e6b1)`(int32_t param)` | 
`public inline int32_t `[`int_part`](#structeosio_1_1fixed__point32_1ad877eb1cdb682c9c1412204a304c1300)`() const` | To get the integer part of the fixed number.
`public inline uint32_t `[`frac_part`](#structeosio_1_1fixed__point32_1a41ff73528b152e09796cde085fac502d)`() const` | 
`public inline void `[`print`](#structeosio_1_1fixed__point32_1a464c1dfdc7c689f18fadcd1de6de1359)`() const` | 
`public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)` & `[`operator=`](#structeosio_1_1fixed__point32_1a58d7f252b05e4d5af1376741f8f6f80b)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` | 
`public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)` & `[`operator=`](#structeosio_1_1fixed__point32_1a3746c182de95876fcbf5784b620d4aed)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` | 
`public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)<(Q >QR)`?Q:QR > `[`operator+`](#structeosio_1_1fixed__point32_1a031984309854b00133383caa360dfaef)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r) const` | 
`public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)<(Q >QR)`?Q:QR > `[`operator-`](#structeosio_1_1fixed__point32_1a8b853041cdc62f50f21067198ea5d20c)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r) const` | 
`public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)`< Q+QR > `[`operator*`](#group__fixedpoint_1ga6e18faa394f294b64783e6b46b5d88d6)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r) const` | Multiplication operator for [fixed_point32](#structeosio_1_1fixed__point32). The result goes to [fixed_point64](#structeosio_1_1fixed__point64).
`public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)`< Q+32-QR > `[`operator/`](#group__fixedpoint_1gabeb73cfe2cf17016a4ad843f3a8a229c)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r) const` | Division of two [fixed_point32](#structeosio_1_1fixed__point32) result will be stored in [fixed_point64](#structeosio_1_1fixed__point64).
`public template<>`  <br/>`inline bool `[`operator==`](#structeosio_1_1fixed__point32_1a7a0bf6847a222bf4055736839675a92c)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` | 
`public template<>`  <br/>`inline bool `[`operator>`](#structeosio_1_1fixed__point32_1a6dcd57ee7c9f558a74d8ce561666745d)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` | 
`public template<>`  <br/>`inline bool `[`operator<`](#structeosio_1_1fixed__point32_1a971f9af6f6dd127c726c9238dcf95aa1)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` | 
`public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)`< Q > & `[`operator=`](#group__fixedpoint_1ga7e9ed1f23b132f0a8c7cca091321807f)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` | 
`public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)`< Q > & `[`operator=`](#group__fixedpoint_1ga346f1bad63f2779ddcfc1fb4bbb533f7)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` | 
`public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)<(Q >QR)`?Q:QR > `[`operator+`](#group__fixedpoint_1ga6eefa850d217b820020e76752abfc3eb)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & rhs) const` | Addition between two [fixed_point32](#structeosio_1_1fixed__point32) variables and the result goes to [fixed_point32](#structeosio_1_1fixed__point32).
`public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)<(Q >QR)`?Q:QR > `[`operator-`](#group__fixedpoint_1ga2c2084d8e4a80f4e75346174b23e78aa)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & rhs) const` | Subtraction between two [fixed_point32](#structeosio_1_1fixed__point32) variables and the result goes to [fixed_point32](#structeosio_1_1fixed__point32).

## Members

#### `public int32_t `[`val`](docs/ fixedpoint#structeosio_1_1fixed__point32_1adc0fb8c31ec9e07e6e3a4a7e04fe2471) 

#### `public template<>`  <br/>` `[`fixed_point32`](#group__fixedpoint_1ga81c6f339a55c8327935ef972ebdb278d)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` 

#### `public template<>`  <br/>` `[`fixed_point32`](#group__fixedpoint_1ga7ad1f82c49b206575fccf8b736815d7c)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` 

#### `public inline  `[`fixed_point32`](#structeosio_1_1fixed__point32_1af7b7646354bc934510228ca1bd53e6b1)`(int32_t param)` 

#### `public inline int32_t `[`int_part`](#structeosio_1_1fixed__point32_1ad877eb1cdb682c9c1412204a304c1300)`() const` 

To get the integer part of the fixed number.

Get the integer part of the 64 bit fixed number 
#### Returns
Returns integer part of the fixed number

Example: 
```cpp
fixed_point32<18> a(1234.455667)
std::cout << a.int_part(); // Output: 1234
```

#### `public inline uint32_t `[`frac_part`](#structeosio_1_1fixed__point32_1a41ff73528b152e09796cde085fac502d)`() const` 

#### `public inline void `[`print`](#structeosio_1_1fixed__point32_1a464c1dfdc7c689f18fadcd1de6de1359)`() const` 

#### `public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)` & `[`operator=`](#structeosio_1_1fixed__point32_1a58d7f252b05e4d5af1376741f8f6f80b)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` 

#### `public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)` & `[`operator=`](#structeosio_1_1fixed__point32_1a3746c182de95876fcbf5784b620d4aed)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` 

#### `public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)<(Q >QR)`?Q:QR > `[`operator+`](#structeosio_1_1fixed__point32_1a031984309854b00133383caa360dfaef)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r) const` 

#### `public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)<(Q >QR)`?Q:QR > `[`operator-`](#structeosio_1_1fixed__point32_1a8b853041cdc62f50f21067198ea5d20c)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r) const` 

#### `public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)`< Q+QR > `[`operator*`](#group__fixedpoint_1ga6e18faa394f294b64783e6b46b5d88d6)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r) const` 

Multiplication operator for [fixed_point32](#structeosio_1_1fixed__point32). The result goes to [fixed_point64](#structeosio_1_1fixed__point64).

Multiplication operator for [fixed_point32](#structeosio_1_1fixed__point32). The result goes to [fixed_point64](#structeosio_1_1fixed__point64) Number of decimal on result will be sum of number of decimals of lhs and rhs

Example: 
```cpp
fixed_point64<33> result = fixed_point32<0>(131313) / fixed_point32<0>(2323)
```

#### `public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)`< Q+32-QR > `[`operator/`](#group__fixedpoint_1gabeb73cfe2cf17016a4ad843f3a8a229c)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r) const` 

Division of two [fixed_point32](#structeosio_1_1fixed__point32) result will be stored in [fixed_point64](#structeosio_1_1fixed__point64).

Division operator for [fixed_point32](#structeosio_1_1fixed__point32)

Example: 
```cpp
fixed_point64<33> result = fixed_point32<0>(131313) / fixed_point32<0>(2323)
```

#### `public template<>`  <br/>`inline bool `[`operator==`](#structeosio_1_1fixed__point32_1a7a0bf6847a222bf4055736839675a92c)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` 

#### `public template<>`  <br/>`inline bool `[`operator>`](#structeosio_1_1fixed__point32_1a6dcd57ee7c9f558a74d8ce561666745d)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` 

#### `public template<>`  <br/>`inline bool `[`operator<`](#structeosio_1_1fixed__point32_1a971f9af6f6dd127c726c9238dcf95aa1)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` 

#### `public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)`< Q > & `[`operator=`](#group__fixedpoint_1ga7e9ed1f23b132f0a8c7cca091321807f)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` 

#### `public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)`< Q > & `[`operator=`](#group__fixedpoint_1ga346f1bad63f2779ddcfc1fb4bbb533f7)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` 

#### `public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)<(Q >QR)`?Q:QR > `[`operator+`](#group__fixedpoint_1ga6eefa850d217b820020e76752abfc3eb)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & rhs) const` 

Addition between two [fixed_point32](#structeosio_1_1fixed__point32) variables and the result goes to [fixed_point32](#structeosio_1_1fixed__point32).

Addition between two [fixed_point32](#structeosio_1_1fixed__point32) variables Number of decimal on result will be max of decimals of lhs and rhs

#### `public template<>`  <br/>[`fixed_point32`](#structeosio_1_1fixed__point32)<(Q >QR)`?Q:QR > `[`operator-`](#group__fixedpoint_1ga2c2084d8e4a80f4e75346174b23e78aa)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & rhs) const` 

Subtraction between two [fixed_point32](#structeosio_1_1fixed__point32) variables and the result goes to [fixed_point32](#structeosio_1_1fixed__point32).

Subtraction between two [fixed_point32](#structeosio_1_1fixed__point32) variables Number of decimal on result will be max of decimals of lhs and rhs

# struct `eosio::fixed_point64` 

64 bits representation of Fixed Point class.

Example: 
```cpp
fixed_point64<6> a(123232.455667233)
fixed_point64<0> a(123424)
fixed_point64<18> c = a*b;
fixed_point64<24> d = a+b+c;
fixed_point64<24> e = b/a;
```

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public int64_t `[`val`](docs/ fixedpoint#structeosio_1_1fixed__point64_1adf1b4e4d25279c532d9ac3ff56d9af21) | 
`public inline  `[`fixed_point64`](#structeosio_1_1fixed__point64_1ab9f53ce12bd0a23708ec0b67ec7848cb)`(int64_t v)` | 
`public template<>`  <br/>` `[`fixed_point64`](#group__fixedpoint_1ga0fcb07196ce3b1ee19897d2edd1f362b)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` | Can create [fixed_point64](#structeosio_1_1fixed__point64) instance from int64_t, [fixed_point64](#structeosio_1_1fixed__point64),32 instances.
`public template<>`  <br/>` `[`fixed_point64`](#group__fixedpoint_1ga02a221576feae394dc006a6f65ba66c2)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` | 
`public inline int64_t `[`int_part`](#structeosio_1_1fixed__point64_1a713dad1088c1c4a95ed446e055f0a523)`() const` | To get the integer part of the fixed number.
`public inline uint64_t `[`frac_part`](#structeosio_1_1fixed__point64_1a616163b00e9c4ff8e237139bb96ad6b1)`() const` | To get the decimal part of the fixed number.
`public inline void `[`print`](#structeosio_1_1fixed__point64_1a85bae51f6eb5071be1e0388e8f0c44af)`() const` | 
`public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)` & `[`operator=`](#structeosio_1_1fixed__point64_1a36ebd8f73c42839443039dbef6462ff4)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` | 
`public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)` & `[`operator=`](#structeosio_1_1fixed__point64_1a4f8cc600e51217711153481052e0002c)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` | 
`public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)<(Q >QR)`?Q:QR > `[`operator+`](#structeosio_1_1fixed__point64_1a91f5e8b0aad593b8f92d8ed9b8f287d0)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r) const` | 
`public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)<(Q >QR)`?Q:QR > `[`operator-`](#structeosio_1_1fixed__point64_1a9b0a83b256f3a7c2dac7a2ba838d8397)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r) const` | 
`public template<>`  <br/>[`fixed_point128`](#structeosio_1_1fixed__point128)`< Q+QR > `[`operator*`](#group__fixedpoint_1gaf88630db8a6e5f2f026abe4b6fc953dc)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r) const` | Multiplication operator for [fixed_point64](#structeosio_1_1fixed__point64). The result goes to [fixed_point64](#structeosio_1_1fixed__point64).
`public template<>`  <br/>[`fixed_point128`](#structeosio_1_1fixed__point128)`< Q+64-QR > `[`operator/`](#group__fixedpoint_1ga810e2397dd4645ec575430ffd54b5d3f)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r) const` | Division of two [fixed_point64](#structeosio_1_1fixed__point64) result will be stored in [fixed_point128](#structeosio_1_1fixed__point128).
`public template<>`  <br/>`inline bool `[`operator==`](#structeosio_1_1fixed__point64_1ad2fb0230d48ccc90795e278e1ef12df6)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` | 
`public template<>`  <br/>`inline bool `[`operator>`](#structeosio_1_1fixed__point64_1a63ee72acb0a3307d54283dba95dc623b)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` | 
`public template<>`  <br/>`inline bool `[`operator<`](#structeosio_1_1fixed__point64_1a2c28bc89073dfa8c6f81ee2594a3272c)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` | 
`public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)<(Q >QR)`?Q:QR > `[`operator+`](#group__fixedpoint_1ga949ad7f0149535736353c9283797468b)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & rhs) const` | Addition between two [fixed_point64](#structeosio_1_1fixed__point64) variables and the result goes to [fixed_point64](#structeosio_1_1fixed__point64).
`public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)<(Q >QR)`?Q:QR > `[`operator-`](#group__fixedpoint_1ga49301a70e323c7b6fa7e8b4d4cd1cce2)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & rhs) const` | Subtraction between two [fixed_point64](#structeosio_1_1fixed__point64) variables and the result goes to [fixed_point64](#structeosio_1_1fixed__point64).

## Members

#### `public int64_t `[`val`](docs/ fixedpoint#structeosio_1_1fixed__point64_1adf1b4e4d25279c532d9ac3ff56d9af21) 

#### `public inline  `[`fixed_point64`](#structeosio_1_1fixed__point64_1ab9f53ce12bd0a23708ec0b67ec7848cb)`(int64_t v)` 

#### `public template<>`  <br/>` `[`fixed_point64`](#group__fixedpoint_1ga0fcb07196ce3b1ee19897d2edd1f362b)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` 

Can create [fixed_point64](#structeosio_1_1fixed__point64) instance from int64_t, [fixed_point64](#structeosio_1_1fixed__point64),32 instances.

Various constructors for [fixed_point64](#structeosio_1_1fixed__point64) Example: 
```cpp
fixed_point32<18> a(1234.455667);
fixed_point64<3> b(a);
fixed_point64<6> b(13324.32323);
fixed_point64<5> c(a);
```

#### `public template<>`  <br/>` `[`fixed_point64`](#group__fixedpoint_1ga02a221576feae394dc006a6f65ba66c2)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` 

#### `public inline int64_t `[`int_part`](#structeosio_1_1fixed__point64_1a713dad1088c1c4a95ed446e055f0a523)`() const` 

To get the integer part of the fixed number.

Get the integer part of the 64 bit fixed number 
#### Returns
Returns integer part of the fixed number

Example: 
```cpp
fixed_point64<18> a(1234.455667)
std::cout << a.int_part(); // Output: 1234
```

#### `public inline uint64_t `[`frac_part`](#structeosio_1_1fixed__point64_1a616163b00e9c4ff8e237139bb96ad6b1)`() const` 

To get the decimal part of the fixed number.

Get the decimal part of the 64 bit fixed number 
#### Returns
Returns decimal part of the fixed number

Example: 
```cpp
fixed64<3> a(1234.455667)
std::cout << a.decimal_part(); // Output: 455
```

#### `public inline void `[`print`](#structeosio_1_1fixed__point64_1a85bae51f6eb5071be1e0388e8f0c44af)`() const` 

#### `public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)` & `[`operator=`](#structeosio_1_1fixed__point64_1a36ebd8f73c42839443039dbef6462ff4)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< QR > & r)` 

#### `public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)` & `[`operator=`](#structeosio_1_1fixed__point64_1a4f8cc600e51217711153481052e0002c)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` 

#### `public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)<(Q >QR)`?Q:QR > `[`operator+`](#structeosio_1_1fixed__point64_1a91f5e8b0aad593b8f92d8ed9b8f287d0)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r) const` 

#### `public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)<(Q >QR)`?Q:QR > `[`operator-`](#structeosio_1_1fixed__point64_1a9b0a83b256f3a7c2dac7a2ba838d8397)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r) const` 

#### `public template<>`  <br/>[`fixed_point128`](#structeosio_1_1fixed__point128)`< Q+QR > `[`operator*`](#group__fixedpoint_1gaf88630db8a6e5f2f026abe4b6fc953dc)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r) const` 

Multiplication operator for [fixed_point64](#structeosio_1_1fixed__point64). The result goes to [fixed_point64](#structeosio_1_1fixed__point64).

Multiplication operator for [fixed_point64](#structeosio_1_1fixed__point64). The result goes to [fixed_point128](#structeosio_1_1fixed__point128) Number of decimal on result will be sum of number of decimals of lhs and rhs

Example: 
```cpp
fixed_point128<33> result = fixed_point64<0>(131313) / fixed_point64<0>(2323)
```

#### `public template<>`  <br/>[`fixed_point128`](#structeosio_1_1fixed__point128)`< Q+64-QR > `[`operator/`](#group__fixedpoint_1ga810e2397dd4645ec575430ffd54b5d3f)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r) const` 

Division of two [fixed_point64](#structeosio_1_1fixed__point64) result will be stored in [fixed_point128](#structeosio_1_1fixed__point128).

Division operator for [fixed_point64](#structeosio_1_1fixed__point64)

Example: 
```cpp
fixed_point128<33> result = fixed_point64<0>(131313) / fixed_point64<0>(2323)
```

#### `public template<>`  <br/>`inline bool `[`operator==`](#structeosio_1_1fixed__point64_1ad2fb0230d48ccc90795e278e1ef12df6)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` 

#### `public template<>`  <br/>`inline bool `[`operator>`](#structeosio_1_1fixed__point64_1a63ee72acb0a3307d54283dba95dc623b)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` 

#### `public template<>`  <br/>`inline bool `[`operator<`](#structeosio_1_1fixed__point64_1a2c28bc89073dfa8c6f81ee2594a3272c)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & r)` 

#### `public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)<(Q >QR)`?Q:QR > `[`operator+`](#group__fixedpoint_1ga949ad7f0149535736353c9283797468b)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & rhs) const` 

Addition between two [fixed_point64](#structeosio_1_1fixed__point64) variables and the result goes to [fixed_point64](#structeosio_1_1fixed__point64).

Addition between two [fixed_point64](#structeosio_1_1fixed__point64) variables Number of decimal on result will be max of decimals of lhs and rhs

#### `public template<>`  <br/>[`fixed_point64`](#structeosio_1_1fixed__point64)<(Q >QR)`?Q:QR > `[`operator-`](#group__fixedpoint_1ga49301a70e323c7b6fa7e8b4d4cd1cce2)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< QR > & rhs) const` 

Subtraction between two [fixed_point64](#structeosio_1_1fixed__point64) variables and the result goes to [fixed_point64](#structeosio_1_1fixed__point64).

Subtraction between two [fixed_point64](#structeosio_1_1fixed__point64) variables Number of decimal on result will be max of decimals of lhs and rhs

# struct `eosio::fixed_point128` 

128 bits representation of Fixed Point class.

The template param Q represents the Q Factor i.e number of decimals Example: 
```cpp
fixed_point128<6> a(123232.455667233)
fixed_point128<0> a(123424)
fixed_point128<18> c = a*b;
fixed_point128<24> d = a+b+c;
fixed_point128<24> e = b/a;
```

## Summary

 Members                        | Descriptions                                
--------------------------------|---------------------------------------------
`public int128_t `[`val`](docs/ fixedpoint#structeosio_1_1fixed__point128_1aca06ae4275f148e87dcd527cbdaf87c5) | 
`public inline  `[`fixed_point128`](#structeosio_1_1fixed__point128_1a35bb5e4ffc953d845551dadf79455ab8)`(int128_t v)` | Can create [fixed_point128](#structeosio_1_1fixed__point128) instance from an int128_t, [fixed_point128](#structeosio_1_1fixed__point128),64,32 instance.
`public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1ga9a6e26a69471e1d42ca0f6b41b673734)`(const `[`fixed_point128`](#structeosio_1_1fixed__point128)`< qr > & r)` | 
`public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1gac03c87c2b4a19daf60e5f9c56c4584f0)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< qr > & r)` | 
`public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1gab26dee4e941063197fb98f2d71d9c8ce)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< qr > & r)` | 
`public inline int128_t `[`int_part`](#structeosio_1_1fixed__point128_1a1790a1e9c8858987870440b7d0221702)`() const` | To get the integer part of the fixed number.
`public inline uint128_t `[`frac_part`](#structeosio_1_1fixed__point128_1a039ff620c0ccbde2438615df5d6d3ab8)`() const` | To get the decimal part of the fixed number.
`public inline void `[`print`](#structeosio_1_1fixed__point128_1ae8064361384dfea9d6d7984719ef4b01)`() const` | 
`public template<>`  <br/>[`fixed_point128`](#structeosio_1_1fixed__point128)` & `[`operator=`](#structeosio_1_1fixed__point128_1ad93deaa805f79fa8547f76039ef9c24d)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< qr > & r)` | 
`public template<>`  <br/>[`fixed_point128`](#structeosio_1_1fixed__point128)` & `[`operator=`](#structeosio_1_1fixed__point128_1ac6221bff5864db61cce02e21d4fa9159)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< qr > & r)` | 
`public template<>`  <br/>[`fixed_point128`](#structeosio_1_1fixed__point128)` & `[`operator=`](#structeosio_1_1fixed__point128_1a30180ac339ef359d5d553c7e5eb1af83)`(const `[`fixed_point128`](#structeosio_1_1fixed__point128)`< qr > & r)` | 
`public template<>`  <br/>`inline bool `[`operator==`](#structeosio_1_1fixed__point128_1aec57d31fe7d5ef08eac57ac793aefa83)`(const `[`fixed_point128`](#structeosio_1_1fixed__point128)`< qr > & r)` | 
`public template<>`  <br/>`inline bool `[`operator>`](#structeosio_1_1fixed__point128_1a062d76e3f824db70e6007dbe34f24874)`(const `[`fixed_point128`](#structeosio_1_1fixed__point128)`< qr > & r)` | 
`public template<>`  <br/>`inline bool `[`operator<`](#structeosio_1_1fixed__point128_1a0f5ea9645922ee31ea90cc3c9bbb58ae)`(const `[`fixed_point128`](#structeosio_1_1fixed__point128)`< qr > & r)` | 

## Members

#### `public int128_t `[`val`](docs/ fixedpoint#structeosio_1_1fixed__point128_1aca06ae4275f148e87dcd527cbdaf87c5) 

#### `public inline  `[`fixed_point128`](#structeosio_1_1fixed__point128_1a35bb5e4ffc953d845551dadf79455ab8)`(int128_t v)` 

Can create [fixed_point128](#structeosio_1_1fixed__point128) instance from an int128_t, [fixed_point128](#structeosio_1_1fixed__point128),64,32 instance.

Various constructors for [fixed_point128](#structeosio_1_1fixed__point128) Example: 
```cpp
          fixed_point64<18> a(1234.455667);
ope        * fixed_point128<3> b(a);
          fixed_point32<6> b(13324.32323);
          fixed_point128<5> c(a);
```

#### `public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1ga9a6e26a69471e1d42ca0f6b41b673734)`(const `[`fixed_point128`](#structeosio_1_1fixed__point128)`< qr > & r)` 

#### `public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1gac03c87c2b4a19daf60e5f9c56c4584f0)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< qr > & r)` 

#### `public template<>`  <br/>` `[`fixed_point128`](#group__fixedpoint_1gab26dee4e941063197fb98f2d71d9c8ce)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< qr > & r)` 

#### `public inline int128_t `[`int_part`](#structeosio_1_1fixed__point128_1a1790a1e9c8858987870440b7d0221702)`() const` 

To get the integer part of the fixed number.

Get the integer part of the 64 bit fixed number 
#### Returns
Returns integer part of the fixed number

Example: 
```cpp
fixed_point64<5> a(1234.455667)
std::cout << a.int_part(); // Output: 1234
```

#### `public inline uint128_t `[`frac_part`](#structeosio_1_1fixed__point128_1a039ff620c0ccbde2438615df5d6d3ab8)`() const` 

To get the decimal part of the fixed number.

Get the decimal part of the 64 bit fixed number 
#### Returns
Returns decimal part of the fixed number

Example: 
```cpp
fixed_point128<3> a(1234.455667)
std::cout << a.decimal_part(); // Output: 455
```

#### `public inline void `[`print`](#structeosio_1_1fixed__point128_1ae8064361384dfea9d6d7984719ef4b01)`() const` 

#### `public template<>`  <br/>[`fixed_point128`](#structeosio_1_1fixed__point128)` & `[`operator=`](#structeosio_1_1fixed__point128_1ad93deaa805f79fa8547f76039ef9c24d)`(const `[`fixed_point32`](#structeosio_1_1fixed__point32)`< qr > & r)` 

#### `public template<>`  <br/>[`fixed_point128`](#structeosio_1_1fixed__point128)` & `[`operator=`](#structeosio_1_1fixed__point128_1ac6221bff5864db61cce02e21d4fa9159)`(const `[`fixed_point64`](#structeosio_1_1fixed__point64)`< qr > & r)` 

#### `public template<>`  <br/>[`fixed_point128`](#structeosio_1_1fixed__point128)` & `[`operator=`](#structeosio_1_1fixed__point128_1a30180ac339ef359d5d553c7e5eb1af83)`(const `[`fixed_point128`](#structeosio_1_1fixed__point128)`< qr > & r)` 

#### `public template<>`  <br/>`inline bool `[`operator==`](#structeosio_1_1fixed__point128_1aec57d31fe7d5ef08eac57ac793aefa83)`(const `[`fixed_point128`](#structeosio_1_1fixed__point128)`< qr > & r)` 

#### `public template<>`  <br/>`inline bool `[`operator>`](#structeosio_1_1fixed__point128_1a062d76e3f824db70e6007dbe34f24874)`(const `[`fixed_point128`](#structeosio_1_1fixed__point128)`< qr > & r)` 

#### `public template<>`  <br/>`inline bool `[`operator<`](#structeosio_1_1fixed__point128_1a0f5ea9645922ee31ea90cc3c9bbb58ae)`(const `[`fixed_point128`](#structeosio_1_1fixed__point128)`< qr > & r)` 

